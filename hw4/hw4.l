(defun MY-LENGTH (L) 
    (cond ((null L) 0)
        (T (+ 1 (MY-LENGTH (cdr L))))
    )
)

(defun MY-MEMQ (A L)
    (cond ((null L) NIL) 
        ((eq A (car L)) L)
        (T (MY-MEMQ A (cdr L)))
    )
)

(defun MY-APPEND (L1 L2)
    (cond ((null L1) L2)
        ((null (cdr L1)) (cons (car L1) L2))
        (T (cons (car L1) (MY-APPEND (cdr L1) L2)))
    )
)

(defun MY-REVERSE-BODY (L R)
    (cond ((null L) R)
        (T (MY-REVERSE-BODY (cdr L) (cons (car L) R)))
    )
)

(defun MY-REVERSE (L)
    (MY-REVERSE-BODY L NIL)
)

(defun MY-MAPCAR (F L)
    (cond ((null L) NIL)
        (T (cons (apply F (cons (car L) NIL)) (MY-MAPCAR F (cdr L))))
    )
)

(defun MY-COPY (L)
    (cond ((atom L) L)
        (T (cons (MY-COPY (car L)) (MY-COPY (cdr L))))
    )
)

(defun MY-NTH (L N)
    (cond ((null L) NIL)
        ((eq N 0) (cons NIL L))
        ((eq N 1) L)
        (T (MY-NTH (cdr L) (- N 1)))
    )
)

(defun MY-REMOVE (X L)
    (cond ((null L) NIL)
        ((equal X (car L)) (MY-REMOVE X (cdr L)))
        (T (cons (car L) (MY-REMOVE X (cdr L))))
    )
)

(defun MY-SUBST (X Y Z)
    (cond ((atom Z) 
            (cond ((eq X Z) Y)
                (T Z)
            )
        )
        (T (cons (MY-SUBST X Y (car Z)) (MY-SUBST X Y (cdr Z))))
    )
)

(defun MY-SUBSET (FN L)
    (cond ((null L) NIL)
        ((apply FN (cons (car L) NIL)) (cons (car L) (MY-SUBSET FN (cdr L))))
        (T (MY-SUBSET FN (cdr L)))
    )
)

(defun MY-ADD-BODY (N1 N2 C)
    (cond ((null N1)
            (cond ((null N2) (cond ((eq C 1) (cons 1 NIL)) (T NIL)))
                ((eq C 1) (cons (MOD (1+ (car N2)) 10) (MY-ADD-BODY N1 (cdr N2) (FLOOR (1+ (car N2)) 10) )))
                (T N2)
            )
        )
        (T (cons (MOD (+ (car N1) (+ C (car N2))) 10) (MY-ADD-BODY (cdr N1) (cdr N2) (FLOOR (+ (car N1) (+ C (car N2))) 10) )))
    )
)

(defun MY-ADD (N1 N2)
    (cond ((< (MY-LENGTH N1) (MY-LENGTH N2)) (MY-ADD-BODY N1 N2 0))
        (T (MY-ADD-BODY N2 N1 0))
    )
)

(defun MY-MERGE (L1 L2)
    (cond ((null L1) L2)
        ((null L2) L1)
        ((< (car L1) (car L2)) (cons (car L1) (MY-MERGE (cdr L1) L2)))
        (T (cons (car L2) (MY-MERGE L1 (cdr L2))))
    )
)

(defun MY-SUBLIST-HELPER (L1 L2)
    (cond ((null L1) T)
        ((null L2) NIL)
        ((eq (car L1) (car L2)) (MY-SUBLIST-HELPER (cdr L1) (cdr L2)))
        (T NIL)
    )
)

(defun MY-SUBLIST (L1 L2)
    (cond ((null L2) NIL)
        ((eq (car L1) (car L2)) (or (MY-SUBLIST-HELPER (cdr L1) (cdr L2)) (MY-SUBLIST L1 (cdr L2))))
        (T (MY-SUBLIST L1 (cdr L2)))
    )
)

(defun MY-ASSOC (A ALIST)
    (cond ((null ALIST) NIL)
        ((eq A (car (car ALIST))) (car ALIST))
        (T (MY-ASSOC A (cdr ALIST)))
    )
)

(defun MY-REPLACE (ALIST L)
    (cond ((null L) NIL)
        ((null (MY-ASSOC (car L) ALIST)) (cons (car L) (MY-REPLACE ALIST (cdr L))))
        (T (cons (cdr (MY-ASSOC (car L) ALIST)) (MY-REPLACE ALIST (cdr L))))
    )
)